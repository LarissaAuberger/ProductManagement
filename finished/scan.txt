func (t *SimpleChaincode) scan(stub *shim.ChaincodeStub, args []string) ([]byte, error) {
	var key, jsonResp, scan_location string
	var err error
  if len(args) != 1 {
		return nil, errors.New("Incorrect number of arguments. Expecting name of the key to query")
	}

	key = args[0]
	valAsbytes, err := stub.GetState(key)

	type Object struct {
		PID								string `json:"pid"`
		ProductionDate 		int `json:"productionDate"`
		Manufacturer 			string `json:"manufacturer"`
		PlantCode 				string `json:"plantCode"`
		Origin						string `json:"origin"`
		Destination				string `json:"destination"`
		Carrier						string `json:"carrier"`
		DepartureDate			int `json:"departureDate"`
		ArrivalDate				int `json:"arrivalDate"`
	}

	var object Object;
	json.Unmarshal([]byte(args[0]), &object)
	key = object.PID

	// if scan_location != object.Destination {
	// 	// WIoTP REST API --> event für Device "BCFakeDetector" eventtype "fake-alert" JSON {"PID":"<replace-me>","fake":"true"}
	// 	url := "http://20wql7.messaging.internetofthings.ibmcloud.com:1883/api/v0002/application/types/FakeDetector/devices/BCFakeDetector/events/fake-alert"
  //   //https://orgId.messaging.internetofthings.ibmcloud.com:8883/api/v0002/application/types/typeId/devices/deviceId/events/eventId
  //   //fmt.Println("URL:>", url)
  //   var jsonStr = []byte("{ \"PID\":\"<replace-me>\",\"fake\":\"true\"}")
  //   req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))
  //   //req.Header.Set("X-Custom-Header", "myvalue")
  //   req.Header.Set("Content-Type", "application/json")
	// 	var user string = "a-20wql7-b28fat8pmw"
	// 	var password string = "T)DwTzn+plN*9tL38N"
	// 	req.Header.Add("Authorization","Basic "+basicAuth(user, password))
	// 
  //   client := &http.Client{}
  //   resp, err := client.Do(req)
  //   if err != nil {
  //       panic(err)
  //   }
  //   defer resp.Body.Close()
  //   //fmt.Println("response Status:", resp.Status)
  //   //fmt.Println("response Headers:", resp.Header)
  //   body, _ := ioutil.ReadAll(resp.Body)
  //   fmt.Println("response Body:", string(body))
	// } else {
	// 
	// 	}

	//	shipmentAsJsonBytes, _ := json.Marshal (details)

	if err != nil {
		jsonResp = "{\"Error\":\"Failed to get state for " + key + "\"}"
		return nil, errors.New(jsonResp)
	}

	return valAsbytes, nil
}